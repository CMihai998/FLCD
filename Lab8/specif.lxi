%{ 	 
#include <stdio.h>
#include <string.h>
int lines = 0;
%} 

%option noyywrap
%option caseless

DIGIT 		[0-9]
WORD		\"[a-zA-Z0-9]*\"
NUMBER		[+-]?[1-9][0-9]*|0
CHARACTER 	\'[a-zA-Z0-9]\'
CONST		{WORD}|{NUMBER}|{CHARACTER}
ID 		[a-zA-Z][a-zA-Z0-9_]

%%

daca            {printf("Reserved word: %s\n", yytext);}
uite              {printf("Reserved word: %s\n", yytext);}
tipami            {printf("Reserved word: %s\n", yytext);}
nr               {printf("Reserved word: %s\n", yytext);}
castron             {printf("Reserved word: %s\n", yytext);}
DADADA             {printf("Reserved word: %s\n", yytext);}
NAH             {printf("Reserved word: %s\n", yytext);}

loop               {printf("Reserved word: %s\n", yytext);}
si              {printf("Reserved word: %s\n", yytext);}
sau             {printf("Reserved word: %s\n", yytext);}
tineminte             {printf("Reserved word: %s\n", yytext);}

{ID}	{printf( "Identifier: %s\n", yytext );}

{CONST}	{printf( "Constant: %s\n", yytext );}


","	    {printf( "Separator: %s\n", yytext );}
"."	    {printf( "Separator: %s\n", yytext );}
"{"	    {printf( "Separator: %s\n", yytext );}
"}"	    {printf( "Separator: %s\n", yytext );}
"("	    {printf( "Separator: %s\n", yytext );}
")"	    {printf( "Separator: %s\n", yytext );}
"["	    {printf( "Separator: %s\n", yytext );}
"]"	    {printf( "Separator: %s\n", yytext );}
"$"	    {printf( "Separator: %s\n", yytext );}
"+"	    {printf( "Operator: %s\n", yytext );}
"-"	    {printf( "Operator: %s\n", yytext );}
"*"	    {printf( "Operator: %s\n", yytext );}
"/"	    {printf( "Operator: %s\n", yytext );}
"<"	    {printf( "Operator: %s\n", yytext );}
">"	    {printf( "Operator: %s\n", yytext );}
"//"	    {printf( "Operator: %s\n", yytext );}
"bagasubradical"	    {printf( "Operator: %s\n", yytext );}
"bagatsubradical"	    {printf( "Operator: %s\n", yytext );}
"=!="	{printf( "Operator: %s\n", yytext );}
"@"	{printf( "Operator: %s\n", yytext );}
"&"	{printf( "Operator: %s\n", yytext );}

"==="	{printf( "Operator: %s\n", yytext );}
"toarna"     {printf( "Operator: %s\n", yytext );}



[ \t]+  	{}
[\n]+ {lines++;}
		 
[+-]?0[0-9]* {printf("Illegal constant at line %d\n", lines);}

[0-9][a-zA-Z0-9]	{printf("Illegal identifier at line %d\n", lines);}



\'[a-zA-Z0-9] {printf("Expected end of string on line %d\n", lines); }

%%
void main(int argc,char** argv)
{
if (argc > 1)
{
    FILE *file;
    file = fopen(argv[1], "r");
    if (!file)
    {
        fprintf(stderr, "Could not open %s\n", argv[1]);
        exit(1);
    }
    yyin = file;
}

yylex();
}